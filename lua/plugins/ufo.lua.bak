return {
  {
    "kevinhwang91/nvim-ufo",
    dependencies = {
      "kevinhwang91/promise-async",
    },
    event = "BufReadPost",
    keys = {
      {
        "zR",
        function()
          require("ufo").openAllFolds()
        end,
        desc = "Open all folds",
      },
      {
        "zM",
        function()
          require("ufo").closeAllFolds()
        end,
        desc = "Close all folds",
      },
      {
        "zr",
        function()
          require("ufo").openFoldsExceptKinds()
        end,
        desc = "Open folds except kinds",
      },
      {
        "zm",
        function()
          require("ufo").closeFoldsWith()
        end,
        desc = "Close folds with",
      },
      {
        "zp",
        function()
          require("ufo").peekFoldedLinesUnderCursor()
        end,
        desc = "Peek folded lines",
      },
      {
        "[z",
        function()
          require("ufo").goPreviousClosedFold()
        end,
        desc = "Previous closed fold",
      },
      {
        "]z",
        function()
          require("ufo").goNextClosedFold()
        end,
        desc = "Next closed fold",
      },
    },
    opts = function()
      -- Custom fold text handler to show number of folded lines
      local handler = function(virtText, lnum, endLnum, width, truncate)
        local newVirtText = {}
        local suffix = (" 󰁂 %d lines "):format(endLnum - lnum)
        local sufWidth = vim.fn.strdisplaywidth(suffix)
        local targetWidth = width - sufWidth
        local curWidth = 0

        for _, chunk in ipairs(virtText) do
          local chunkText = chunk[1]
          local chunkWidth = vim.fn.strdisplaywidth(chunkText)
          if targetWidth > curWidth + chunkWidth then
            table.insert(newVirtText, chunk)
          else
            chunkText = truncate(chunkText, targetWidth - curWidth)
            local hlGroup = chunk[2]
            table.insert(newVirtText, { chunkText, hlGroup })
            chunkWidth = vim.fn.strdisplaywidth(chunkText)
            -- Padding if needed
            if curWidth + chunkWidth < targetWidth then
              suffix = suffix .. (" "):rep(targetWidth - curWidth - chunkWidth)
            end
            break
          end
          curWidth = curWidth + chunkWidth
        end

        table.insert(newVirtText, { suffix, "MoreMsg" })
        return newVirtText
      end

      return {
        -- Time in milliseconds to highlight opened fold
        open_fold_hl_timeout = 400,

        -- Provider selector function
        provider_selector = function(bufnr, filetype, buftype)
          -- Use LSP for most filetypes, with treesitter as fallback
          local ftMap = {
            vim = "indent",
            python = "indent",
            git = "",
            markdown = { "treesitter", "indent" },
            json = { "lsp", "indent" },
            yaml = { "lsp", "indent" },
          }

          -- Return the provider for specific filetype, or use default
          return ftMap[filetype] or { "lsp", "treesitter", "indent" }
        end,

        -- Close specific fold kinds when buffer is opened
        close_fold_kinds_for_ft = {
          default = { "imports", "comment" },
          json = { "array" },
          c = { "comment", "region" },
          cpp = { "comment", "region" },
          rust = { "comment" },
        },

        -- Whether to close fold on current line when buffer is opened
        close_fold_current_line_for_ft = {
          default = false,
        },

        -- Custom fold text handler
        fold_virt_text_handler = handler,

        -- Enable getting fold virtual text
        enable_get_fold_virt_text = false,

        -- Preview window configuration
        preview = {
          win_config = {
            border = "rounded",
            winblend = 12,
            winhighlight = "Normal:Normal",
            maxheight = 20,
          },
          mappings = {
            scrollB = "<C-b>",
            scrollF = "<C-f>",
            scrollU = "<C-u>",
            scrollD = "<C-d>",
            scrollE = "<C-e>",
            scrollY = "<C-y>",
            jumpTop = "gg",
            jumpBot = "G",
            close = "q",
            switch = "<Tab>",
            trace = "<CR>",
          },
        },
      }
    end,
    config = function(_, opts)
      -- Configure fold settings
      vim.o.foldcolumn = "1" -- Show fold column
      vim.o.foldlevel = 99 -- High value to keep folds open by default
      vim.o.foldlevelstart = 99 -- Start with all folds open
      vim.o.foldenable = true -- Enable folding

      -- Modern fold icons (requires a Nerd Font)
      vim.o.fillchars = [[eob: ,fold: ,foldopen:,foldsep: ,foldclose:]]

      -- Setup nvim-ufo
      require("ufo").setup(opts)

      -- Override K to peek fold or show hover
      vim.keymap.set("n", "K", function()
        local winid = require("ufo").peekFoldedLinesUnderCursor()
        if not winid then
          -- If not on a fold, show LSP hover
          vim.lsp.buf.hover()
        end
      end, { desc = "Peek fold or hover" })
    end,
  },
}
